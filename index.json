[{"categories":["Docker"],"content":"Docker笔记 ","date":"2020-05-10","objectID":"/docker_bj/:0","tags":["docker"],"title":"Docker笔记","uri":"/docker_bj/"},{"categories":["Docker"],"content":"修改镜像源 新建/etc/docker/daemon.json文件，添加阿里源: 1 2 3 { \"registry-mirrors\":[\"https://zp88dfcp.mirror.aliyuncs.com\"] } ","date":"2020-05-10","objectID":"/docker_bj/:1","tags":["docker"],"title":"Docker笔记","uri":"/docker_bj/"},{"categories":["Docker"],"content":"Docker信息 查看Docker版本 1 docker version 查看Docker信息 1 docker info ","date":"2020-05-10","objectID":"/docker_bj/:2","tags":["docker"],"title":"Docker笔记","uri":"/docker_bj/"},{"categories":["Docker"],"content":"镜像 搜索远程镜像 1 docker search [参数] \u003c镜像名\u003e 参数 作用 -s n 显示的最低星级 查看本地镜像 1 docker images [镜像名]:查看本地镜像 参数 作用 --no-trunc 显示完整镜像ID -q 只返回镜像ID 查看容器/镜像的详细信息 1 docker inspect 容器/镜名[:标签名] 拉取远程镜像 1 docker pull [镜像名:tag] 参数 作用 -a 拉取所有镜像 删除镜像 docker rmi 镜像名[:标签名] 更新镜像 docker commit [参数] [容器名] [镜像名]:通过容器构建镜像 -a “\":指定作者 -m “\":记录镜像构建信息 -p:不暂停正在运行的容器 构建镜像 build Dockfile 指定使用的镜像 FORM image 描述作者 MAINTAINER name email 在镜像中执行的命令 RUM command 启动容器时的默认命令项，用户没用时使用 CMD ","date":"2020-05-10","objectID":"/docker_bj/:3","tags":["docker"],"title":"Docker笔记","uri":"/docker_bj/"},{"categories":["Docker"],"content":"容器 查看容器 1 docker ps 参数 作用 -a 查看所有镜像 run [参数] [镜像] [命令]:新建容器并启动 –name 别名:设置容器别名 -d:以后台形式运行容器 -i:始终为容器打开标准输入 -t:为容器分配一个tty终端 -p [ip:宿主机端口:容器端口]:指定映射端口 start -i [容器名]:在前台启动容器 attach [容器名] | Ctrl+p+q:把容器转入前台/后台 stop/kill [容器名]:发送信号并等待停止/直接停止容器 top [容器名]:查看运行中容器进程 exec [容器] [命令]:为运行中容器启动新进程 rm [容器名]:删除已停止的容器 ","date":"2020-05-10","objectID":"/docker_bj/:4","tags":["docker"],"title":"Docker笔记","uri":"/docker_bj/"},{"categories":["Docker"],"content":"日志 logs [容器名]:查看日志 -f:一直跟踪命令并返回结果 -t:结果返回时间轴 –tail n:返回最后n条结果 prot [容器名]:查看容器映射的端口 ","date":"2020-05-10","objectID":"/docker_bj/:5","tags":["docker"],"title":"Docker笔记","uri":"/docker_bj/"},{"categories":["Docker"],"content":"登入 docker login –username:登入 docker tag [镜像名:tag] username/镜像名 :为镜像添加一个标签 docker push username/镜像名:tag :推送镜像 ","date":"2020-05-10","objectID":"/docker_bj/:6","tags":["docker"],"title":"Docker笔记","uri":"/docker_bj/"},{"categories":[],"content":"正则表达式 ","date":"2020-05-08","objectID":"/linux_regex/:0","tags":[],"title":"正则表达式笔记","uri":"/linux_regex/"},{"categories":[],"content":"重复 符号 作用 + 前面的字符可重复[1,正无穷)次 * 前面的字符可重复[0,正无穷)次 ? 前面的字符可重复[0,1]次 {n} 前面的字符可重复n次 {n,} 前面的字符可重复[n,正无穷)次 {n,m} 前面的字符可重复[n,m]次 ","date":"2020-05-08","objectID":"/linux_regex/:1","tags":[],"title":"正则表达式笔记","uri":"/linux_regex/"},{"categories":[],"content":"元字符 符号 作用 . 匹配除换行符外的任意1个字符 ^ 匹配以后面的字符作开头,如^str $ 匹配以前面的字符作结尾,如str$ [] 匹配方括号内表达式,如[0-9],[a-z],[aAbB] [^] 不匹配方括号内的表达式,如[^0-9],[^aAbB] (str1|str2) 匹配包含str1或str2的内容,并将此作为表达式 str1|str2 匹配包含str1或str2的内容 \\ 转义后面的字符 \\w 匹配字母/数字/下划线/汉字,等同[a-zA-Z0-9_] \\W 不匹配字母/数字/下划线/汉字,等同[^\\w] \\d 匹配数字,等同[0-9] \\D 不匹配数字,等同[^\\D] \\s 匹配空字符 \\S 不匹配，等同[^\\s] ","date":"2020-05-08","objectID":"/linux_regex/:2","tags":[],"title":"正则表达式笔记","uri":"/linux_regex/"},{"categories":["Sql"],"content":"Mssql数据库笔记 ","date":"2020-03-30","objectID":"/sql_mssql/:0","tags":["sql"],"title":"Mssql笔记","uri":"/sql_mssql/"},{"categories":["Sql"],"content":"数据库操作 1 2 3 4 5 6 7 8 -- 进入数据库 use \u003c数据库名\u003e; -- 显示数据库列表 show databases; -- 查看创建数据库的语句 show create database \u003c数据库名\u003e; ","date":"2020-03-30","objectID":"/sql_mssql/:1","tags":["sql"],"title":"Mssql笔记","uri":"/sql_mssql/"},{"categories":["Sql"],"content":"数据表操作 1 2 3 4 5 6 7 8 -- 显示数据表列表(必须先进入数据库才可以显示数据表) show tables; -- 查看数据表结构 desc \u003c数据表名\u003e; -- 查看创建表的语句 show create table \u003c数据表名\u003e; ","date":"2020-03-30","objectID":"/sql_mssql/:2","tags":["sql"],"title":"Mssql笔记","uri":"/sql_mssql/"},{"categories":["Sql"],"content":"Select查询 基本语法 1 2 3 4 5 6 7 select \u003c字段\u003e [ as \u003c别名\u003e ] from \u003c数据表\u003e [ inner join 数据表2 on \u003c连接条件\u003e ] [ where \u003c入口条件\u003e ] [ group by \u003c聚集\u003e ] [ having \u003c出口条件\u003e ] [ order by \u003c排序 asc|desc\u003e ] select 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 -- 显示该字段的记录 select \u003c字段列表\u003e -- 只显示头n条记录 select top n \u003c字段列表\u003e -- 字段内容相同的记录只出现一次 select distinct \u003c字段列表\u003e -- 将查询结果存入临时表 select \u003c字段列表\u003e into #临时表名 -- 新建一个表，并将查询结果存入 select \u003c字段列表\u003e into 新表名 -- 拼接查询结果 select * from \u003c表1\u003e union select * from \u003c表2\u003e from 1 2 3 4 5 6 7 8 -- 别名表 from \u003c表名\u003e 别名 -- where多表查询 from \u003c表1\u003e,\u003c表2\u003e where 双表匹配字段 -- 内连查询 from \u003c表1\u003e inner join \u003c表2\u003e on 双表匹配字段 where 1 2 3 4 5 6 7 8 9 10 11 -- 匹配结果 where \u003c字段列表\u003e in (select 语句) -- 符合全部结果 where \u003c字段列表\u003e \u003e all (select 语句) -- 符合任意一个结果 where \u003c字段列表\u003e \u003e any (select 语句) -- %:匹配多个字符 _:匹配一个字符 where \u003c字段列表\u003e like \"匹配信息\" 函数 1 2 getdate() 获取当前日期 check(字段名 in(1,2)) 限定(常用于创建表时设置的字段限定值) ","date":"2020-03-30","objectID":"/sql_mssql/:3","tags":["sql"],"title":"Mssql笔记","uri":"/sql_mssql/"},{"categories":["Sql"],"content":"Insert插入 1 2 3 insert into \u003c表名\u003e values() insert into \u003c表名(字段)\u003e values() insert into \u003c表名\u003e select查询结果 ","date":"2020-03-30","objectID":"/sql_mssql/:4","tags":["sql"],"title":"Mssql笔记","uri":"/sql_mssql/"},{"categories":["Sql"],"content":"Update修改 1 2 3 update \u003c表名\u003e set 字段1=新值,... [ where \u003c条件\u003e ] update \u003c表名\u003e set 字段1=新值,... [ from 连接表 ] ","date":"2020-03-30","objectID":"/sql_mssql/:5","tags":["sql"],"title":"Mssql笔记","uri":"/sql_mssql/"},{"categories":["Sql"],"content":"Delete删除 1 2 3 delete from \u003c表名\u003e [ where \u003c条件\u003e ] delete from \u003c表名\u003e [ from 连接表 ] ","date":"2020-03-30","objectID":"/sql_mssql/:6","tags":["sql"],"title":"Mssql笔记","uri":"/sql_mssql/"},{"categories":["Sql"],"content":"Create创建 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 -- 创建数据库 create database \u003c数据库名,...\u003e; -- 创建数据表(创建一个表至少要包含一个字段) create table \u003c数据表名\u003e (字段1 数据类型,...); -- 创建公用表 with \u003c公用表名\u003e [ (字段列表) ] as (\u003cselect 语句\u003e) select * from \u003c 公用表名 \u003e -- 创建视图(如果用了排序就要用top才能创建) create view \u003c视图名\u003e [ (列名...) ] as \u003cselect 语句\u003e -- 创建存储过程(函数,output可将变量值返回) create proc \u003c存储过程名\u003e [ @变量1 数据类型,@变量2 数据类型 [ output ],... ] as \u003cselect 语句\u003e go -- 调用 exec \u003c存储过程名\u003e \u003c参数\u003e [ output ] -- 创建索引 -- unique:唯一的 -- clustered:聚集的 create [ unique ] [ clustered ] index \u003cindex_name\u003e on \u003ctable_name(字段名 [ asc|desc ])\u003e ","date":"2020-03-30","objectID":"/sql_mssql/:7","tags":["sql"],"title":"Mssql笔记","uri":"/sql_mssql/"},{"categories":["Sql"],"content":"Drop移除 1 2 3 4 5 6 7 8 9 10 11 12 13 14 -- 移除数据库 drop database \u003c数据库名\u003e -- 移除表 drop table \u003c表名\u003e -- 移除视图 drop view \u003c视图名\u003e -- 移除存储过程 drop proc \u003c存储过程名\u003e -- 移除索引 drop index \u003cindex_name\u003e on \u003ctable_name\u003e ","date":"2020-03-30","objectID":"/sql_mssql/:8","tags":["sql"],"title":"Mssql笔记","uri":"/sql_mssql/"},{"categories":["Sql"],"content":"注释 1 2 3 4 5 -- 行注释 /* 块注释 */ ","date":"2020-03-30","objectID":"/sql_mssql/:9","tags":["sql"],"title":"Mssql笔记","uri":"/sql_mssql/"},{"categories":["Sql"],"content":"变量 系统全局变量 系统全局变量以@@为前缀，用户不能自定义和改值 变量名 作用 @@SERVERNAME 返回运行 SQL Server 的本地服务器的名称 @@CURSOR_ROWS 返回连接打开的上一个游标中的当前限定行的数目 @@ROWCOUNT 返回受上一语句影响的行数 @@VERSION 返回当前的 SQL Server 安装的版本、处理器体系结构、生成日期和操作系统 @@ERROR 返回执行的上一个 T-SQL 语句的错误号 局部变量 局部变量以@为前缀,可自定义 定义 1 declare \u003c@变量名\u003e \u003c数据类型\u003e [,...] 赋值 1 set @变量名=值 或 select @变量名=值 打印 1 select @变量名 或 print @变量名 类型转换 1 2 -- 返回转换后的数据 cast(@变量名 as 转换的类型) 列子 注意，这些语句在执行时，要全部选中，一起执行。 1 2 3 4 declare @wname varchar(50),@wid char(3) set @wid='005' select @wname=(select wname from worker where wid=@wid) select @wname as 职工姓名 ","date":"2020-03-30","objectID":"/sql_mssql/:10","tags":["sql"],"title":"Mssql笔记","uri":"/sql_mssql/"},{"categories":["Sql"],"content":"流程控制 条件 1 2 -- 判断查询子句是否有记录，有回True，无回False exists(select 语句) 条件判断 1 2 3 4 5 6 if \u003c条件\u003e begin \u003c语句\u003e end [ else \u003c语句\u003e ] 循环 1 2 3 4 while \u003c条件\u003e begin \u003c语句\u003e end ","date":"2020-03-30","objectID":"/sql_mssql/:11","tags":["sql"],"title":"Mssql笔记","uri":"/sql_mssql/"},{"categories":["Js"],"content":"javascript笔记 ","date":"2020-03-05","objectID":"/js_bj/:0","tags":["js"],"title":"Javascript笔记","uri":"/js_bj/"},{"categories":["Js"],"content":"关键字 let声明块级作用域变量，替代var const声明块级作用域常量 ","date":"2020-03-05","objectID":"/js_bj/:1","tags":["js"],"title":"Javascript笔记","uri":"/js_bj/"},{"categories":["Js"],"content":"解构赋值 let [x,y,z]=[values] ","date":"2020-03-05","objectID":"/js_bj/:2","tags":["js"],"title":"Javascript笔记","uri":"/js_bj/"},{"categories":["Js"],"content":"内置对象 Math 方法 说明 ceil() 对数进行上舍入 floor() 对数进行下舍入 round() 四舍五入 random() 随机数 Array 创建 var array=new Array(size) var array=new Array(values) var array=[values] 方法 说明 slice(index1,index2) 返回元素[index1,index2) join(separator) 把所有元素合成字符串，元素之间由分隔符号分隔 unshift(values) 在数组首部添加元素，返回新长度 shift() 移除数组首元素 push(values) 在数组尾部添加元素，返回新长度 pop() 移除数组尾元素 reverse() 数组反转 fill(value) 替换所有元素 splice(index,number,values) 从指定索引开始删除n个元素，可以在删除的位置添加元素 concat(values) 返回添加元素后的数组 map(function) 高阶函数，接收一个参数，函数作用于每个元素，返回新数组 filter(function) 高级函数，接收一个参数，如果函数返回值为false则丢弃该元素，返回新数组 reduce(function) 高阶函数，接收两个参数，函数依次作用在两个元素上，保留结果作为下一个x，返回结果 sort(function) 高阶函数，接收两个参数，函数返回负数不排序，返回正数排序 every(function) 高阶函数，判断所有元素是否满足条件，返回逻辑值 find(function) 高阶函数，查找符合条件的第一个元素并返回该元素 findIndex(function) 高阶函数，查找符合条件的第一个元素并返回该元素索引 String 方法 说明 charAt(index) 返回指定索引位置的字符 indexOf(searchvalue,fromindex) 返回指定字符串首次出现在字符串中的索引 substring(index1,index2) 返回字符串[index1,index2) split(separator) 使用指定分割符分隔字符串并返回数组 toLowerCase() 返回字符串的小写形式 toUpperCase() 返回字符串的大写形式 ","date":"2020-03-05","objectID":"/js_bj/:3","tags":["js"],"title":"Javascript笔记","uri":"/js_bj/"},{"categories":["Js"],"content":"函数 arguments类似Array，永远指向函数的所有参数。 ...rest写在参数最后，把多余的参数以Array形式给rest变量 函数:function fn(){} 匿名函数：let fn=function(){} Lambda：let fn=()=\u003e{} 高级函数：function fn(x,y,f){return f(x)+f(y)} ","date":"2020-03-05","objectID":"/js_bj/:4","tags":["js"],"title":"Javascript笔记","uri":"/js_bj/"},{"categories":["Js"],"content":"对象 例： 1 2 3 4 5 6 7 8 9 let stu={ id:0, name:'Jack', brith:2000, skill:null, ago:function(){ return (new Date().getFullYear()) - this.brith } } 添加属性 stu.ago=20 删除属性 delete stu.ago 判断对象是否存在属性 'ago' in stu ","date":"2020-03-05","objectID":"/js_bj/:5","tags":["js"],"title":"Javascript笔记","uri":"/js_bj/"},{"categories":["Js"],"content":"Map 创建 var m=new Map() var m=new Map([[key1,value1],[key2,value2],...]) 方法 说明 set(key,value) 添加键或修改键值 get(key) 返回键值 has(key) 是否存在键 delete(key) 删除键 ","date":"2020-03-05","objectID":"/js_bj/:6","tags":["js"],"title":"Javascript笔记","uri":"/js_bj/"},{"categories":["Js"],"content":"Set 创建 var s=new Set() var s=new Set([values]) 方法 说明 add(key) 添加键 has(key) 是否存在键 delete(key) 删除键 ","date":"2020-03-05","objectID":"/js_bj/:7","tags":["js"],"title":"Javascript笔记","uri":"/js_bj/"},{"categories":["Js"],"content":"其它 方法 说明 typeof(value) 返回该值的数据类型 parseInt(value) 返回该值的整型 parseFloat(value) 返回该值的浮点型 ","date":"2020-03-05","objectID":"/js_bj/:8","tags":["js"],"title":"Javascript笔记","uri":"/js_bj/"},{"categories":["Js"],"content":"输出 document.write() console.log() ","date":"2020-03-05","objectID":"/js_bj/:9","tags":["js"],"title":"Javascript笔记","uri":"/js_bj/"},{"categories":["Js"],"content":"循环 计数循环：for(初值;条件;自增){} 条件循环：while(条件){} 遍历下标：for(let i in list){} 遍历值：for(let i of list){} ","date":"2020-03-05","objectID":"/js_bj/:10","tags":["js"],"title":"Javascript笔记","uri":"/js_bj/"},{"categories":["Js"],"content":"正则 创建 let re=/^\\d{3}\\w$/ let re=new RegExp('\\d{3}\\w$') 判断匹配 1 2 re.test('123w') // true re.test('s23w') // false 提取 re.exec(str) 提取匹配的字符串，返回第一个元素是正则表达式匹配到的整个字符串，其余是匹配到的字串 ","date":"2020-03-05","objectID":"/js_bj/:11","tags":["js"],"title":"Javascript笔记","uri":"/js_bj/"},{"categories":["Js"],"content":"类 1 2 3 4 5 class person{ // 构造函数 constructor(){} function ... } ","date":"2020-03-05","objectID":"/js_bj/:12","tags":["js"],"title":"Javascript笔记","uri":"/js_bj/"},{"categories":["Js"],"content":"BOM window 属性/方法 说明 innerWidth 获取浏览器内部宽度 innerHeight 获取浏览器内部高度 outerWidth 获取浏览器外部宽度 outerHeight 获取浏览器外部高度 prompt(massage) 输入框(消息+输入框+取消按钮+确认按钮) alert(massage) 警示框(消息+确认按钮) confirm(massage) 对话框(消息+取消按钮+确认按钮) close() 关闭浏览器窗口 open(\"url\",\"窗口名称\",\"窗口特征\") 打开新的窗口 setTimeout(函数,毫秒) 几毫秒后执行一次函数 setInterval(函数,毫秒) 每过几毫秒执行一次函数 clearTimeout(返回的id) 清空 clearInterval(返回的id) 清空 navigator 属性 说明 appName 获取浏览器名称 appVersion 获取浏览器版本 language 获取浏览器设置语言 platform 获取操作系统类型 userAgent 获取浏览器设定的user-Agent字符串 screen 属性 说明 width 获取屏幕宽度 height 获取屏幕高度 colorDepth 获取屏幕颜色位数 location 属性 说明 href 获取URL host 获取站点主页URL document 属性 说明 title 修改网页标题 cookie 获取cookie getElementById() 根据ID获取DOM节点 getElementByName() 根据Name获取DOM节点 getElementsByTagName() 根据Tag获取DOM节点 getElementsByClassName() 根据Class获取DOM节点 createElement 创建节点 appendChild() 插入节点 insertBefore(插入的节点, 指定节点) 插入到指定节点前 children 返回所有节点 history 属性 说明 back() 返回前一个url forward() 返回后一个url go() 返回某个具体的url ","date":"2020-03-05","objectID":"/js_bj/:13","tags":["js"],"title":"Javascript笔记","uri":"/js_bj/"},{"categories":["Linux"],"content":"科学上网 ","date":"2020-02-23","objectID":"/linux_clash/:0","tags":["linux"],"title":"Clash科学上网","uri":"/linux_clash/"},{"categories":["Linux"],"content":"简介 Clash是一款用Go开发的支持Linux/MacOS/Windows等多平台的代理工具，支持ss/v2ray（不支持ssr），支持规则分流。 项目地址：Clash ","date":"2020-02-23","objectID":"/linux_clash/:1","tags":["linux"],"title":"Clash科学上网","uri":"/linux_clash/"},{"categories":["Linux"],"content":"安装 下载适合自己平台的版本或直接从包管理软件安装。 解压得到可执行文件clash-linux-amd64。 ","date":"2020-02-23","objectID":"/linux_clash/:2","tags":["linux"],"title":"Clash科学上网","uri":"/linux_clash/"},{"categories":["Linux"],"content":"配置 生成配置文件 运行clash-linux-amd64，程序将自动创建/home/当前用户ID/.config/clash路径，并在该路径下生成config.yaml和Country.mmdb文本。 代理商配置 clash需要自己的服务器及规则信息，我们从GLaDOS获得。 在GLaDOS创建一个账户，得到10G流量和两天试用期。 点击我的配置，下载通用配置。 覆盖~/.config/clash/config.yaml文件。 1 cp glados.yaml ~/.config/clash/config.yaml 全球IP库 Country.mmdb为全球IP库，可以实现各个国家的IP信息解析和地理定位。 clash目前无法自动生成IP库，需要手动下载Country.mmdb。 覆盖~/.config/clash/Country.mmdb文件。 1 cp Country.mmdb ~/.config/clash/Country.mmdb 浏览器代理 以火狐为例，配置信息与config.yaml对应 浏览器菜单-首选项-常规-网络设置-设置-手动代理配置 ","date":"2020-02-23","objectID":"/linux_clash/:3","tags":["linux"],"title":"Clash科学上网","uri":"/linux_clash/"},{"categories":["Linux"],"content":"启动 守护进程开启代理(没有pm2可跳过) 1 2 sudo pacman -S pm2 pm2 start clash clash开启代理(需保持运行状态) 1 clash 浏览器选择手动代理配置以连接代理 ","date":"2020-02-23","objectID":"/linux_clash/:4","tags":["linux"],"title":"Clash科学上网","uri":"/linux_clash/"},{"categories":["Linux"],"content":"管理 进入clash.razord.top ","date":"2020-02-23","objectID":"/linux_clash/:5","tags":["linux"],"title":"Clash科学上网","uri":"/linux_clash/"},{"categories":["Linux"],"content":"关闭 守护进程关闭代理(没有pm2可跳过) 1 pm2 stop clash clash关闭代理 Ctrl+c快捷键 将浏览器设置为使用系统代理，否则无法上网。 ","date":"2020-02-23","objectID":"/linux_clash/:6","tags":["linux"],"title":"Clash科学上网","uri":"/linux_clash/"},{"categories":["Linux"],"content":"浏览器异常 在浏览器搜索框输入about:config，搜索security.enterprise_roots.enabled，把值改为true 更换其它浏览器(需写浏览器代理配置) ","date":"2020-02-23","objectID":"/linux_clash/:7","tags":["linux"],"title":"Clash科学上网","uri":"/linux_clash/"},{"categories":["Linux"],"content":"离线浏览Arch Wiki ","date":"2020-02-18","objectID":"/linux_arch_wiki_man/:0","tags":["linux"],"title":"离线浏览Arch Wiki","uri":"/linux_arch_wiki_man/"},{"categories":["Linux"],"content":"简介 arch-wiki-man是ArchLinux Wiki的脱机副本，可以像man一样查看wiki。 ","date":"2020-02-18","objectID":"/linux_arch_wiki_man/:1","tags":["linux"],"title":"离线浏览Arch Wiki","uri":"/linux_arch_wiki_man/"},{"categories":["Linux"],"content":"安装 项目地址:https://github.com/greg-js/arch-wiki-man 通过yay安装 yay -S arch-wiki-man ","date":"2020-02-18","objectID":"/linux_arch_wiki_man/:2","tags":["linux"],"title":"离线浏览Arch Wiki","uri":"/linux_arch_wiki_man/"},{"categories":["Linux"],"content":"语法 1 awman [option...] [search-query] ","date":"2020-02-18","objectID":"/linux_arch_wiki_man/:3","tags":["linux"],"title":"离线浏览Arch Wiki","uri":"/linux_arch_wiki_man/"},{"categories":["Linux"],"content":"选项 -d：同时在标题和描述中搜索 -k：在文章内容中搜索,这个选项会使搜索速度变慢 -w：打开浏览器查看,需要联网 -l：选择语言 --list-languages：查看可用语言列表 ","date":"2020-02-18","objectID":"/linux_arch_wiki_man/:4","tags":["linux"],"title":"离线浏览Arch Wiki","uri":"/linux_arch_wiki_man/"},{"categories":["Linux"],"content":"例子 根据标题搜索wiki 1 awman vim 根据标题和描述搜索wiki 1 awman -d vim 用其它语言查看结果 查看可选语言列表 1 awman --list-languages 使用中文查看wiki 1 awman -l chinesesim vim ","date":"2020-02-18","objectID":"/linux_arch_wiki_man/:5","tags":["linux"],"title":"离线浏览Arch Wiki","uri":"/linux_arch_wiki_man/"},{"categories":["Linux"],"content":"更新本地库 更新每隔两天自动推送一次，可以使用命令主动更新。 1 awman-update ","date":"2020-02-18","objectID":"/linux_arch_wiki_man/:6","tags":["linux"],"title":"离线浏览Arch Wiki","uri":"/linux_arch_wiki_man/"},{"categories":["Java"],"content":"Java文件操作 ","date":"2020-02-16","objectID":"/java_file/:0","tags":["java"],"title":"Java 文件操作","uri":"/java_file/"},{"categories":["Java"],"content":"引入包 1 import java.io.File; ","date":"2020-02-16","objectID":"/java_file/:1","tags":["java"],"title":"Java 文件操作","uri":"/java_file/"},{"categories":["Java"],"content":"构造 1 File f=new File(\"路径\"); ","date":"2020-02-16","objectID":"/java_file/:2","tags":["java"],"title":"Java 文件操作","uri":"/java_file/"},{"categories":["Java"],"content":"常用API 返回路径 String getPath()：返回传入的路径 String getAbsolutePath()：返回绝对路径 String getCanonicalPath()：返回规范路径,类似绝对路径 判断文件 boolean isFIle()：是否是已存在的文件 boolean isHidden()：是否是隐藏文件 boolean isAbsolute()：文件路径是否是绝对路径 boolean isDirectory()：是否是目录 判断权限 boolean canRead()：文件是否可读 boolean canWrite()：文件是否可写 boolean canExecute()：文件是否可执行 创建和删除 boolean createNewFile()：创建一个新文件 boolean delete()：删除文件 String createTempFile(\"文件前缀\",\"文件后缀\")：创建一个临时文件 deleteOnExit()：JVM退出时自动删除该文件 传入的路径是目录时 boolean mkdir()：创建目录 boolean mkdirs()：创建目录,并且会创建父目录 boolean delete()：删除目录,当前目录必须为空才能删除 遍历文件和目录 传入的路径是目录时 String list()：列出目录下的文件和子目录名,用遍历查看 File listFiles()：列出目录下的文件和子目录名,用遍历查看,有./ 其它 long length()：文件字节大小 ","date":"2020-02-16","objectID":"/java_file/:3","tags":["java"],"title":"Java 文件操作","uri":"/java_file/"},{"categories":["Linux"],"content":"在Linux中，tar是使用的最多的压缩/解压缩工具，常用于备份文件。 ","date":"2020-02-15","objectID":"/linux_tar/:0","tags":["linux"],"title":"归档工具Tar","uri":"/linux_tar/"},{"categories":["Linux"],"content":"语法 1 tar [选项...] [参数]... ","date":"2020-02-15","objectID":"/linux_tar/:1","tags":["linux"],"title":"归档工具Tar","uri":"/linux_tar/"},{"categories":["Linux"],"content":"常用选项 基本选项 此类选项是独立的，压缩和解压时必须用到一个，通常于可选选项配合使用。 -c 建立压缩文件 -t 查看压缩文件内容 -x 解压 -r 在压缩文件末尾添加文件 -u 更新压缩文件 可选选项 -z 使用gzip方法压缩 -j 使用bz2方法压缩 -J 使用xz方法压缩(Linux压缩文件通常用这种) -v 显示过程 -f 设置档案名(参数必选，并且要放在所有参数的后面) ","date":"2020-02-15","objectID":"/linux_tar/:2","tags":["linux"],"title":"归档工具Tar","uri":"/linux_tar/"},{"categories":["Linux"],"content":"实例 假设当前路径下有这些文件。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 rull@ENIAC ~/Documents/ak $ ll 总用量 0 drwxr-xr-x 2 rull rull 137 2月 15 14:01 txt rull@ENIAC ~/Documents/ak $ ll txt/ 总用量 0 -rw-r--r-- 1 rull rull 0 2月 15 13:42 1.txt -rw-r--r-- 1 rull rull 0 2月 15 13:42 2.txt -rw-r--r-- 1 rull rull 0 2月 15 13:42 3.txt -rw-r--r-- 1 rull rull 0 2月 15 13:42 4.txt -rw-r--r-- 1 rull rull 0 2月 15 13:42 5.txt -rw-r--r-- 1 rull rull 0 2月 15 13:42 6.txt -rw-r--r-- 1 rull rull 0 2月 15 13:42 7.txt -rw-r--r-- 1 rull rull 0 2月 15 13:42 8.txt -rw-r--r-- 1 rull rull 0 2月 15 13:42 9.txt -rw-r--r-- 1 rull rull 0 2月 15 13:42 10.txt rull@ENIAC ~/Documents/ak $ 打包 1 2 3 4 5 6 7 8 # 仅打包，不压缩 tar -cvf txt.tar txt/ # 打包并以gzip压缩 tar -czvf txt.tar.gz txt/ # 打包并以bz2压缩 tar -cjvf txt.tar.bz2 txt/ # 打包并以xz压缩 tar -cJvf txt.tar.xz txt/ 效果 1 2 3 4 5 6 7 8 rull@ENIAC ~/Documents/ak $ ll 总用量 24K drwxr-xr-x 2 rull rull 137 2月 15 14:01 txt -rw-r--r-- 1 rull rull 10K 2月 15 14:03 txt.tar -rw-r--r-- 1 rull rull 219 2月 15 14:04 txt.tar.bz2 -rw-r--r-- 1 rull rull 216 2月 15 14:04 txt.tar.gz -rw-r--r-- 1 rull rull 240 2月 15 14:04 txt.tar.xz rull@ENIAC ~/Documents/ak $ 查看 1 2 3 4 5 6 7 8 9 10 11 12 13 rull@ENIAC ~/Documents/ak $ tar -tf txt.tar txt/ txt/1.txt txt/10.txt txt/2.txt txt/3.txt txt/4.txt txt/5.txt txt/6.txt txt/7.txt txt/8.txt txt/9.txt rull@ENIAC ~/Documents/ak $ 解压 1 2 3 4 tar -xf txt.tar tar -xzf txt.tar.gz tar -xjf txt.tar.bz2 tar -xJf txt.tar.xz 追加文件 1 tar -rf 压缩文件 追加的文件 ","date":"2020-02-15","objectID":"/linux_tar/:3","tags":["linux"],"title":"归档工具Tar","uri":"/linux_tar/"},{"categories":["Linux"],"content":"Markdown笔记 ","date":"2020-02-10","objectID":"/linux_markdown/:0","tags":["markdown"],"title":"MarkDown笔记","uri":"/linux_markdown/"},{"categories":["Linux"],"content":"简介 Markdown是一种轻量级标记语言，创始人是约翰·格鲁伯(John Gruber)。它允许人们 “使用易读易写的纯文本格式编写文档，然后转换成有效的 HTML 文档。 Markdown编写的文档后缀为.md, .markdown。 ","date":"2020-02-10","objectID":"/linux_markdown/:1","tags":["markdown"],"title":"MarkDown笔记","uri":"/linux_markdown/"},{"categories":["Linux"],"content":"编辑器 本地编辑器: Typora 在线编辑器: 菜鸟工具 Md2All MdEditor ","date":"2020-02-10","objectID":"/linux_markdown/:2","tags":["markdown"],"title":"MarkDown笔记","uri":"/linux_markdown/"},{"categories":["Linux"],"content":"语法 标题 标题有六个等级，用#表示,对应\u003ch1\u003e至\u003ch6\u003e。 1 2 3 4 5 6 # 一级标题 ## 二级标题 ### 三级标题 #### 四级标题 ##### 五级标题 ###### 六级标题 字体 1 2 3 4 5 6 7 8 9 *斜体* **粗体** ***粗体+斜体*** \u003cu\u003e下划线\u003c/u\u003e ~~删除线~~ `代码高亮` 上标：x\u003csup\u003e2\u003c/sup\u003e 下标：H\u003csub\u003e2\u003c/sub\u003eO \u003ckbd\u003eCtrl\u003c/kbd\u003e+\u003ckbd\u003eAlt\u003c/kbd\u003e+\u003ckbd\u003eDel\u003c/kbd\u003e 斜体 粗体 粗体+斜体 下划线 删除线 代码高亮 上标：x2 下标：H2O Ctrl+Alt+Del 换行 字符串后面加两个空格并回车 字符串之间空一行 水平线 *** + 回车 引用 \u003e + 空格 + 引用文字 列表 有序列表 1. index 2. index 3. index 无序列表 * index * index * index 复选框 1 2 * [x] 勾选 * [ ] 未勾选 代码块 在代码块前后分别使用```包围代码 1 2 3 4 5 public class Main{ public static void main(String[] args){ System.out.println(\"markdown\"); } } 代码高亮：在```后加对应语言名称 1 2 3 4 5 public class Main{ public static void main(String[] args){ System.out.println(\"markdown\"); } } 表格 1 2 3 4 | 左对齐 | 居中 | 友对齐 | | :- | :-: | -: | | a1 | b1 | c1 | | a2 | b2 | c2 | 左对齐 居中 友对齐 a1 b1 c1 a2 b2 c2 链接 直链 1 这里是百度：\u003chttps://www.baidu.com\u003e 这里是百度：https://www.baidu.com 普通链接 1 2 这里是百度：[无标题](https://www.baidu.com) 这里是百度：[有标题](https://www.baidu.com \"有标题\") 这里是百度：无标题 这里是百度：有标题 普通链接2 1 2 3 4 这是[百度],这是[必应]。 [百度]: https://www.baidu.com [必应]: https://cn.bing.com \"必应\" 这是百度,这是必应。 图片链接：![记号](url \"title\") 1 ![](http://t8.baidu.com/it/u=3571592872,3353494284\u0026fm=79\u0026app=86\u0026size=h300\u0026n=0\u0026g=4n\u0026f=jpeg?sec=1582865366\u0026t=7f007911b8bb371a8c582004f342a5bb \"图片\") 图片\" 图片 脚注 脚注记号不能用中文 1 2 3 这是一个脚注[^1] [^1]: 这是脚注的内容 这是一个脚注1 目录 在行首输入[toc],将自动提取标题建立目录 这是脚注的内容 ↩︎ ","date":"2020-02-10","objectID":"/linux_markdown/:3","tags":["markdown"],"title":"MarkDown笔记","uri":"/linux_markdown/"},{"categories":null,"content":"个人博客 ","date":"2020-02-10","objectID":"/about/:0","tags":null,"title":"说明","uri":"/about/"},{"categories":["Linux"],"content":"Virtualbox中Photoshop图片不显示(已解决) 解决方法一 打开ps 选择菜单栏-编辑-首选项-性能 关闭使用图形处理器选项 解决方法二 打开VirtualBox 选中创建的系统镜像 右击选择设置-显示-关闭启动3D加速选项 参考官方说明 ","date":"2020-02-07","objectID":"/linux_ps_vbox/:0","tags":["linux"],"title":"Virtualbox中Photoshop图片不显示","uri":"/linux_ps_vbox/"},{"categories":["Linux"],"content":"WPS for Linux 用不了输入法(已解决) 1 找到wps配置文件 文档:/usr/bin/wps 表格:/usr/bin/et 演示:/usr/bin/wpp PDF:/usr/bin/wpspdf 2 修改文本 root权限打开对应文本,在#!/bin/bash下添加 1 2 export XMODIFIERS=\"@im=fcitx\" export QT_IM_MODULE=\"fcitx\" 3 重新打开软件","date":"2020-02-06","objectID":"/linux_wps_input/:0","tags":["linux","wps"],"title":"WPS for Linux 用不了中文输入法","uri":"/linux_wps_input/"},{"categories":["Linux"],"content":"ArchLinux配置源 ","date":"2020-02-06","objectID":"/linux_arch_source/:0","tags":["linux"],"title":"ArchLinux配置源","uri":"/linux_arch_source/"},{"categories":["Linux"],"content":"在/etc/pacman.conf末尾添加以下内容： 1 2 3 [archlinuxcn] SigLevel = Optional TrustedOnly Include = /etc/pacman.d/archlinuxcn ","date":"2020-02-06","objectID":"/linux_arch_source/:1","tags":["linux"],"title":"ArchLinux配置源","uri":"/linux_arch_source/"},{"categories":["Linux"],"content":"创建/etc/pacman.d/archlinuxcn文件，把以下内容复制进去 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 ## 浙江大学 Server = https://mirrors.zju.edu.cn/archlinuxcn/$arch ## 中科大 Server = https://mirrors.ustc.edu.cn/archlinuxcn/$arch ## 清华大学 Server = https://mirrors.tuna.tsinghua.edu.cn/archlinuxcn/$arch ## 上海大学 Server = https://mirrors.shuosc.org/archlinuxcn/$arch ## 莞工 GNU/Linux 协会 Server = https://mirrors.dgut.edu.cn/archlinuxcn/$arch ## SJTUG Server = https://mirrors.sjtug.sjtu.edu.cn/archlinux-cn/$arch ## 网易 Server = https://mirrors.163.com/archlinux-cn/$arch ## 腾讯云 Server = https://mirrors.cloud.tencent.com/archlinuxcn/$arch ## 上海科技大学 Server = https://mirrors-wan.geekpie.club/archlinuxcn/$arch ## 重庆大学 Server = https://mirrors.cqu.edu.cn/archlinuxcn/$arch ","date":"2020-02-06","objectID":"/linux_arch_source/:2","tags":["linux"],"title":"ArchLinux配置源","uri":"/linux_arch_source/"},{"categories":["Linux"],"content":"刷新缓存：sudo pacman -Syy","date":"2020-02-06","objectID":"/linux_arch_source/:3","tags":["linux"],"title":"ArchLinux配置源","uri":"/linux_arch_source/"}]